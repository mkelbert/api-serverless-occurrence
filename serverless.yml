service: aws-nodejs
provider:
  name: aws
  runtime: nodejs6.10
  region: sa-east-1
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:sa-east-1:*:*"

package:
  exclude:
    - src/**
    - node_modules/**
    - LICENSE
    - README.md
    - serverless.yml
    - .babelrc
    - .editorconfig
    - .eslintrc.json
    - .gitignore
    - serverless_old.yml
    - package-lock.json
    - npm-debug.log

functions:
  userNew:
    handler: dist/handler/v1/user.register
    events:
      - http:
          path: /v1/user/register
          method: post
          integration: aws_proxy
          cors: true

  userAuthenticate:
    handler: dist/handler/v1/user.authenticate
    events:
      - http:
          path: /v1/user/authenticate
          method: post
          integration: aws_proxy
          cors: true

  occurrenceRegister:
    handler: dist/handler/v1/occurrence.register
    events:
      - http:
          path: /v1/occurrence/register
          method: post
          integration: aws_proxy
          cors: true

  occurrenceDelete:
    handler: dist/handler/v1/occurrence.delete
    events:
      - http:
          path: /v1/occurrence/delete
          method: post
          integration: aws_proxy
          cors: true

  occurrenceList:
    handler: dist/handler/v1/occurrence.list
    events:
      - http:
          path: /v1/occurrence/list
          method: post
          integration: aws_proxy
          cors: true

resources:
  Resources:

    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: 'User'
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    OccurrenceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: 'Occurrence'
        AttributeDefinitions:
          - AttributeName: code
            AttributeType: S
        KeySchema:
          - AttributeName: code
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
#     OcurrenceTable:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: ${file(./config.js):location.tableOccurrence}
#         AttributeDefinitions:
#           - AttributeName: id
#             AttributeType: S
#         KeySchema:
#           - AttributeName: id
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1

#     S3BucketPhotos:
#       Type: AWS::S3::Bucket
#       Properties:
#         BucketName: ${file(./config.js):location.bucketPhoto}

# plugins:
#   - serverless-dynamodb-local
#   - serverless-offline

# custom:
#   dynamodb:
#     start:
#       port: 8000
#       inMemory: true
#       migrate: true
